package com.manager;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.model.Czesc;
import com.model.Zamowienie;
import com.model.ListaCzesci;

public class ListaCzesciManager {
	private Connection conn;
	private Statement stmt;

	private PreparedStatement DodajCzescdoZamowienia;
	private PreparedStatement UsunCzesczZamowienia;
	private PreparedStatement UsunWszystkieListCzescid;
	private PreparedStatement UsunWszystkieListCzesc;
	private PreparedStatement GetListaCzesc;
	private PreparedStatement GetListCzescid;
	private PreparedStatement UpdateListaCzesc;

	private CzescManager czescManager = new CzescManager();
	private ZamowienieManager zamowienieManager = new ZamowienieManager();

	public ListaCzesciManager() {
		try {
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			stmt = conn.createStatement();
			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("ListaCzesci".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists)
				stmt.executeUpdate(
						"Create table ListaCzesci (idListaCzesci int GENERATED BY DEFAULT AS IDENTITY,idZamowienie int ,idCzesc int,foreign key (idZamowienie) references zamowienie(idZamowienie), foreign key (idCzesc) references czesc(idCzesc),PRIMARY KEY(idListaCzesci))");
			DodajCzescdoZamowienia = conn
					.prepareStatement("INSERT INTO ListaCzesci (idZamowienie,idCzesc) VALUES (?,?)");
			UsunCzesczZamowienia = conn
					.prepareStatement("DELETE FROM ListaCzesci WHERE idZamowienie = ? AND idCzesc = ?");
			UsunWszystkieListCzescid = conn.prepareStatement("DELETE FROM ListaCzesci WHERE idZamowienie = ?");
			UsunWszystkieListCzesc = conn.prepareStatement("DELETE FROM ListaCzesci");
			// GetListaCzescid = conn.prepareStatement("SELECT * FROM
			// ListaCzesci");
			GetListaCzesc = conn.prepareStatement(
					"SELECT z.numerzamowienie , z.datazamowienie, z.kontrahent, cz.numerczesci, cz.nazwa, cz.cena FROM ListaCzesci as lcz LEFT JOIN czesc as cz ON cz.idCzesc=lcz.idCzesc LEFT JOIN zamowienie as z ON z.idZamowienie=lcz.idZamowienie");
			// dodaj ï¿½aczenie
			UpdateListaCzesc = conn.prepareStatement(
					"Update ListaCzesci SET idCzesc = ? , idZamowienie = ? Where idCzesc = ? AND idZamowienie = ? ");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return conn;
	}

	public int DodajCzescdoZamowienia(Zamowienie zamowienie, Czesc czesc) {
		int licznik = 0;
		try {
			DodajCzescdoZamowienia.setInt(1, zamowienie.getIdZamowienie());
			DodajCzescdoZamowienia.setInt(2, czesc.getIdCzesc());
			
			licznik = DodajCzescdoZamowienia.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return licznik;
	}

	public int UsunCzesczZamowienia(Zamowienie zamowienie, Czesc czesc) {
		int licznik = 0;
		try {
			conn.setAutoCommit(false);
			UsunCzesczZamowienia.setInt(1, zamowienie.getIdZamowienie());
			UsunCzesczZamowienia.setInt(2, czesc.getIdCzesc());
			licznik = UsunCzesczZamowienia.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return licznik;
	}

	public int UsunWszystkieListCzescid(Zamowienie zamowienie) {
		int licznik = 0;
		try {
			conn.setAutoCommit(false);
			UsunWszystkieListCzescid.setInt(1, zamowienie.getIdZamowienie());
			licznik = UsunWszystkieListCzescid.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return licznik;
	}

	public int UsunWszystkieListCzesc() {
		int licznik = 0;
		try {
			conn.setAutoCommit(false);
			licznik = UsunWszystkieListCzesc.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return licznik;
	}

	public int UpdateListaCzesc(Czesc czescstare, Czesc czescnowe, Zamowienie zamowieniestare,
			Zamowienie zamowienienowe) {
		int licznik = 0;
		try {
			conn.setAutoCommit(false);
			UpdateListaCzesc.setInt(1, czescstare.getIdCzesc());
			UpdateListaCzesc.setInt(2, zamowieniestare.getIdZamowienie());
			UpdateListaCzesc.setInt(3, czescnowe.getIdCzesc());
			UpdateListaCzesc.setInt(4, zamowienienowe.getIdZamowienie());
			licznik = UpdateListaCzesc.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return licznik;
	}
	/*
	public List<Czesc> listCzesci(Zamowienie zamowienie){
		List <Czesc> czesci = new ArrayList<Czesc>();
		try{
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
		
	}
*/
}
