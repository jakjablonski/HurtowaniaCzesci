
package manager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import model.Czesc;
import model.Zamowienie;

public class ZamowienieManager {
	private Connection conn;
	private Statement stmt;
	
	private PreparedStatement DodajZamowienie;
	private PreparedStatement UsunZamowienie;
	private PreparedStatement UsunWszystkieZamowienie;
	private PreparedStatement GetZamowienie;
	private PreparedStatement GetZamowienieid;
	private PreparedStatement listaZamowienie;
	
	public ZamowienieManager(){
		try{
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			stmt = conn.createStatement();
			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Zamowienie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists) stmt.executeUpdate("Create table Zamowienie (idZamowienie int UNIQUE GENERATED BY DEFAULT AS IDENTITY, numerzamowienie varchar(10), dataZamowienie date DEFAULT CURRENT_DATE, kontrahent varchar(50), numertel varchar(11), adres varchar(50)");
			DodajZamowienie = conn.prepareStatement("INSERT INTO Zamowienie(numerzamowienia,kontrahent, suma ,dataZamowienie) VALUES (?,?,?)");
			UsunZamowienie = conn.prepareStatement("DELETE FROM Zamowienie WHERE idZamowienie = ?");
			UsunWszystkieZamowienie = conn.prepareStatement("DELETE FROM Zamowienie");
			GetZamowienie = conn.prepareStatement("SELECT * FROM Zamowienie WHERE kontrahent = ?");
			GetZamowienieid = conn.prepareStatement("SELECT * FROM Zamowienie WHERE idZamowienie = ?");
			listaZamowienie = conn.prepareStatement("SELECT * FROM Zamowienie");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public Connection getConnection() {
		return conn;
	}
	
	public int DodajZamowienie(Zamowienie zamowienie){
		int licznik = 0;
			try {
				conn.setAutoCommit(false);
				DodajZamowienie.setDate(1, zamowienie.getDataZamowienie());
				DodajZamowienie.setString(2, zamowienie.getKontrahent());
				DodajZamowienie.setString(3, zamowienie.getNumerTel());
				DodajZamowienie.setString(4, zamowienie.getAdres());
				licznik = DodajZamowienie.executeUpdate();
				conn.commit();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return licznik;
		}
	
	public int UsunZamowienie(Zamowienie zamowienie){
		int licznik = 0;
			try {
				conn.setAutoCommit(false);
				UsunZamowienie.setInt(1, zamowienie.getIdZamowienie());
				licznik = UsunZamowienie.executeUpdate();
				conn.commit();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return licznik;
		}
	
	public int UsunWszystkieZamowienie(Zamowienie zamowienie){
		int licznik = 0;
			try {
				conn.setAutoCommit(false);
				licznik = UsunWszystkieZamowienie.executeUpdate();
				conn.commit();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return licznik;
		}
	//daj listy
	}
